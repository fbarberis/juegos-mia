import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAdmin } from '../../contexts/AdminContext';
import { GameResult } from '../GameResult';
import { MemorySettings } from './memory/MemorySettings';
import { Button } from '@/components/ui/button';
import { ArrowLeft, RotateCcw, Eye, EyeOff } from 'lucide-react';

interface Card {
  id: number;
  pairId: number;
  imageUrl: string;
  name: string;
  isFlipped: boolean;
  isMatched: boolean;
}

const miaPhotos = [
  { 
    imageUrl: '/Fotos Mia/Imagen de WhatsApp 2025-07-25 a las 10.52.19_fe2ab3d4.jpg', 
    name: 'Mia Casual 1' 
  },
  { 
    imageUrl: '/Fotos Mia/IMG-20250725-WA0005.jpg', 
    name: 'Mia Casual 2' 
  },
  { 
    imageUrl: '/Fotos Mia/IMG-20250725-WA0006.jpg', 
    name: 'Mia Elegante 1' 
  },
  { 
    imageUrl: '/Fotos Mia/IMG-20250725-WA0008.jpg', 
    name: 'Mia Elegante 2' 
  },
  { 
    imageUrl: '/Fotos Mia/IMG-20250725-WA0009.jpg', 
    name: 'Mia Moderna 1' 
  },
  { 
    imageUrl: '/Fotos Mia/IMG-20250725-WA0011.jpg', 
    name: 'Mia Moderna 2' 
  },
  { 
    imageUrl: '/Fotos Mia/IMG-20250725-WA0012.jpg', 
    name: 'Mia Dulce 1' 
  },
  { 
    imageUrl: '/Fotos Mia/IMG-20250725-WA0013.jpg', 
    name: 'Mia Quincea√±era 1' 
  }
];

export const MemoryGame: React.FC = () => {
  const navigate = useNavigate();
  const { config } = useAdmin();
  const [cards, setCards] = useState<Card[]>([]);
  const [flippedCards, setFlippedCards] = useState<number[]>([]);
  const [moves, setMoves] = useState(0);
  const [matchedPairs, setMatchedPairs] = useState(0);
  const [isGameComplete, setIsGameComplete] = useState(false);
  const [gameWon, setGameWon] = useState(false);
  const [attempts, setAttempts] = useState(0);
  const [showPreview, setShowPreview] = useState(false);
  const [score, setScore] = useState(0);
  
  // Settings state
  const [maxMoves, setMaxMoves] = useState(15);
  const [gridSize, setGridSize] = useState(4);

  const gameConfig = config.gameConfigs['memory'];
  const maxAttempts = gameConfig?.maxAttempts || 1;
  const totalPairs = Math.floor((gridSize * gridSize) / 2);

  const initializeGame = () => {
    const selectedPhotos = miaPhotos.slice(0, totalPairs);
    const gameCards: Card[] = [];
    
    // Create pairs of cards
    selectedPhotos.forEach((photo, index) => {
      // First card of the pair
      gameCards.push({
        id: index * 2,
        pairId: index,
        imageUrl: photo.imageUrl,
        name: photo.name,
        isFlipped: false,
        isMatched: false,
      });
      
      // Second card of the pair
      gameCards.push({
        id: index * 2 + 1,
        pairId: index,
        imageUrl: photo.imageUrl,
        name: photo.name,
        isFlipped: false,
        isMatched: false,
      });
    });
    
    // Shuffle the cards
    const shuffledCards = gameCards.sort(() => Math.random() - 0.5);
    
    setCards(shuffledCards);
    setFlippedCards([]);
    setMoves(0);
    setMatchedPairs(0);
    setIsGameComplete(false);
    setGameWon(false);
    setScore(0);
  };

  const resetGame = () => {
    if (attempts < maxAttempts) {
      setAttempts(prev => prev + 1);
      initializeGame();
    }
  };

  useEffect(() => {
    initializeGame();
  }, [gridSize]);

  useEffect(() => {
    const allPairsMatched = matchedPairs === totalPairs;
    const movesExceeded = moves >= maxMoves;
    
    if (allPairsMatched || movesExceeded) {
      setIsGameComplete(true);
      setGameWon(allPairsMatched);
      
      if (allPairsMatched) {
        const bonusScore = Math.max(0, maxMoves - moves) * 50;
        setScore(prev => prev + bonusScore + (matchedPairs * 100));
      }
    }
  }, [matchedPairs, moves, maxMoves, totalPairs]);

  useEffect(() => {
    if (flippedCards.length === 2) {
      const [firstId, secondId] = flippedCards;
      const firstCard = cards.find(c => c.id === firstId);
      const secondCard = cards.find(c => c.id === secondId);
      
      if (firstCard && secondCard && firstCard.pairId === secondCard.pairId) {
        // Match found
        setTimeout(() => {
          setCards(prev => prev.map(card => 
            card.pairId === firstCard.pairId 
              ? { ...card, isMatched: true }
              : card
          ));
          setMatchedPairs(prev => prev + 1);
          setScore(prev => prev + 200);
          setFlippedCards([]);
        }, 800);
      } else {
        // No match
        setTimeout(() => {
          setCards(prev => prev.map(card => 
            flippedCards.includes(card.id)
              ? { ...card, isFlipped: false }
              : card
          ));
          setFlippedCards([]);
        }, 1200);
      }
    }
  }, [flippedCards, cards]);

  const handleCardClick = (cardId: number) => {
    if (isGameComplete || moves >= maxMoves || flippedCards.length >= 2) return;
    
    const card = cards.find(c => c.id === cardId);
    if (!card || card.isFlipped || card.isMatched || flippedCards.includes(cardId)) return;

    setCards(prev => prev.map(c => 
      c.id === cardId ? { ...c, isFlipped: true } : c
    ));
    
    setFlippedCards(prev => [...prev, cardId]);
    setMoves(prev => prev + 1);
  };

  const getEfficiencyScore = () => {
    if (moves === 0) return 100;
    const efficiency = Math.max(0, Math.round((totalPairs / moves) * 100));
    return efficiency;
  };

  const gameStats = {
    movimientos: moves,
    'm√°ximo permitido': maxMoves,
    'parejas encontradas': matchedPairs,
    'parejas totales': totalPairs,
    'eficiencia': `${getEfficiencyScore()}%`,
    puntuaci√≥n: score
  };

  return (
    <div 
      className="min-h-screen p-6"
      style={{
        background: `linear-gradient(135deg, ${config.primaryColor}40, ${config.secondaryColor}40, #1e1b4b)`
      }}
    >
      <div className="max-w-lg mx-auto">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <Button 
            onClick={() => navigate('/')} 
            variant="outline"
            className="bg-black/20 border-white/20 text-white hover:bg-white/10"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            Volver
          </Button>
          
          {config.logoUrl && (
            <div className="flex justify-center">
              <img 
                src={config.logoUrl} 
                alt={config.brandName}
                className="h-12 w-auto object-contain"
                onError={(e) => {
                  e.currentTarget.style.display = 'none';
                }}
              />
            </div>
          )}
          
          <div className="flex gap-2">
            <MemorySettings
              maxMoves={maxMoves}
              gridSize={gridSize}
              onMaxMovesChange={setMaxMoves}
              onGridSizeChange={setGridSize}
            />
            <Button
              onClick={() => setShowPreview(!showPreview)}
              variant="outline"
              size="sm"
              className="bg-black/20 border-white/20 text-white hover:bg-white/10"
            >
              {showPreview ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
            </Button>
            <Button
              onClick={resetGame}
              variant="outline"
              className="bg-black/20 border-white/20 text-white hover:bg-white/10"
              disabled={attempts >= maxAttempts}
            >
              <RotateCcw className="w-4 h-4 mr-2" />
              ({attempts}/{maxAttempts})
            </Button>
          </div>
        </div>

        {/* Game Title */}
        <h1 
          className="text-4xl font-bold text-center text-white mb-8 animate-neon-pulse"
          style={{
            textShadow: `0 0 20px ${config.primaryColor}, 0 0 40px ${config.secondaryColor}`
          }}
        >
          üß† {config.gameTexts['memory'] || 'Juego de Memoria'}
        </h1>

        {/* Preview Modal */}
        {showPreview && (
          <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
            <div className="bg-black/80 rounded-lg p-6 max-w-md w-full max-h-[80vh] overflow-y-auto">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-white font-bold">Fotos a Emparejar</h3>
                <Button onClick={() => setShowPreview(false)} variant="ghost" size="sm">
                  <EyeOff className="w-4 h-4" />
                </Button>
              </div>
              <div className="grid grid-cols-3 gap-2">
                {miaPhotos.slice(0, totalPairs).map((item, index) => (
                  <div key={index} className="aspect-square rounded-lg overflow-hidden bg-white/10">
                    <img 
                      src={item.imageUrl} 
                      alt={item.name}
                      className="w-full h-full object-cover object-top"
                    />
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Game Stats */}
        <div 
          className="rounded-lg p-4 mb-6 text-center backdrop-blur-sm border"
          style={{
            backgroundColor: `${config.primaryColor}20`,
            borderColor: `${config.secondaryColor}40`
          }}
        >
          <div className="grid grid-cols-3 gap-4 text-white">
            <div>
              <span className="text-gray-400 text-xs">Movimientos:</span>
              <div 
                className={`text-lg font-bold ${moves >= maxMoves * 0.8 ? 'text-red-400' : ''}`}
                style={moves < maxMoves * 0.8 ? { color: config.secondaryColor } : {}}
              >
                {moves}/{maxMoves}
              </div>
            </div>
            <div>
              <span className="text-gray-400 text-xs">Parejas:</span>
              <div 
                className="text-lg font-bold"
                style={{ color: config.primaryColor }}
              >
                {matchedPairs}/{totalPairs}
              </div>
            </div>
            <div>
              <span className="text-gray-400 text-xs">Puntos:</span>
              <div 
                className="text-lg font-bold"
                style={{ color: config.secondaryColor }}
              >
                {score}
              </div>
            </div>
          </div>
        </div>

        {/* Game Grid */}
        <div 
          className={`grid gap-3 mb-8`}
          style={{ 
            gridTemplateColumns: `repeat(${gridSize}, 1fr)`,
            aspectRatio: '1'
          }}
        >
          {cards.map((card) => (
            <div
              key={card.id}
              onClick={() => handleCardClick(card.id)}
              className={`
                aspect-square rounded-lg overflow-hidden cursor-pointer
                transition-all duration-500 transform hover:scale-105
                ${card.isFlipped || card.isMatched 
                  ? 'shadow-2xl rotate-y-180' 
                  : 'hover:shadow-md hover:brightness-110'
                }
                ${card.isMatched ? 'animate-pulse ring-2 ring-opacity-50' : ''}
                flex items-center justify-center
              `}
              style={{
                background: card.isFlipped || card.isMatched 
                  ? 'white'
                  : '#1e1b4b',
                ...(card.isMatched ? { ringColor: config.secondaryColor } : {})
              }}
            >
              {card.isFlipped || card.isMatched ? (
                <img 
                  src={card.imageUrl} 
                  alt={card.name}
                  className="w-full h-full object-cover object-top rounded-lg"
                />
              ) : (
                <div className="w-full h-full flex items-center justify-center">
                  {config.logoUrl ? (
                    <img 
                      src={config.logoUrl} 
                      alt="Mia Logo"
                      className="w-12 h-12 object-contain opacity-60"
                    />
                  ) : (
                    <div className="text-2xl opacity-60">‚ú®</div>
                  )}
                </div>
              )}
            </div>
          ))}
        </div>

        {/* Instructions */}
        {!isGameComplete && (
          <div className="bg-black/20 rounded-lg p-4 text-center backdrop-blur-sm">
            <p className="text-gray-300 text-sm">
              üß† Encuentra las {totalPairs} parejas de fotos id√©nticas en {maxMoves} movimientos
            </p>
            <p className="text-gray-400 text-xs mt-1">
              {config.eventTheme.eventType} de {config.eventTheme.personName} üéÇ
            </p>
          </div>
        )}
      </div>

      <GameResult
        gameCompleted={isGameComplete}
        gameWon={gameWon}
        gameTitle={config.gameTexts['memory'] || 'Juego de Memoria'}
        gameIcon="üß†"
        gameStats={gameStats}
        onPlayAgain={attempts < maxAttempts ? resetGame : undefined}
      />
    </div>
  );
};